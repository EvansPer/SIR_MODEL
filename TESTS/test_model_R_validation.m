function test_model_R_validation()

% This test verifies that, provided the expected vectors determined by fit parameters and raw data, the
% function model_R can return values compatible with the formers.

% INIT PARAMETERS:
% - D_0: float number, amplitude of death expression
% - k: float number, time constant of death expression
% - y: nx3 matrix (n generic) containng 3 equal column vector 1:20, 100
%   elements
% - total_removed: nx1 column vector containing numbers from 1 to 20, 100
%   elements
% - deaths: nx1 column vector generated from total_removed
% - expected_D_vs_R: fit object that encapsulates the result of fitting the model specified by the fittype FT
%   fit(total_removed,deaths,FitType,Initial_Guess) -> D = D(R_m)
% - expected_model_D_vs_R: nx1 column vector generated by the fit
%   parameters and the vector total_removed
% - expected_model_recovered: nx1 column vector generated by the
%   difference between y(:,3) (third column vector) and deaths vector

% The model_R function is called and its results are compared with the
% expected ones. Error arises if the compatibility is lower than a certain
% threshold.
    
    addpath(genpath(fullfile(pwd,"..","FUNCTIONS")));
    
    D_0 = 5;
    k = 2.3;

    y = [linspace(1,20,100)',linspace(1,20,100)',linspace(1,20,100)'];
    total_removed = linspace(1,20,100)';
    deaths = D_0*(1-exp(-k*total_removed));
    
    expected_D_vs_R = fit(total_removed,deaths,"D_0*(1-exp(-k*x))","StartPoint",[D_0 k]);
    expected_model_D = expected_D_vs_R.D_0*(1-exp(-expected_D_vs_R.k*total_removed)); 
    expected_model_recovered = y(:,3) - expected_model_D;

    [model_D_vs_R, model_D, model_recovered] = model_R(y,total_removed, deaths);

    assert(isequal(class(model_D_vs_R), class(expected_D_vs_R)), "Unexpected class for model_D_vs_R");
    assert(all(abs(model_D - expected_model_D) < 1e-7), "model_D does not match expected value");
    assert(all(abs(model_recovered - expected_model_recovered)< 1e-7), "model_recovered does not match expected value");
    
end
