function test_model_R_noise()

% This test verifies that, provided a correct input with random fluctuations,
% the function model_R is capable of returning the correct value
% within the selected threshold.

% INIT PARAMETERS:
% - D_0: float number, amplitude of death expression
% - k: float number, time constant of death expression
% - y: nx3 matrix (n generic) containng 3 equal column vector 1:20, 100
%   elements, disturbed by random values generated by randn
% - total_removed: nx1 column vector containing numbers from 1 to 20, 100
%   elements
% - deaths: nx1 column vector generated from total_removed disturbed with
%   random values generated by randn
% - expected_model_recovered: nx1 column vector generated by the
%   difference between y(:,3) (third column vector) and deaths vector

% When the model_R function is called, it produces a model to be compared
% with the raw data. An error arises when the compatibility condition is
% not met.
    
    addpath(genpath(fullfile(pwd,"..","FUNCTIONS")));
    
    D_0 = 5;
    k = 2.3;
    rng(1); % Random seed = 1, Mersenne Twister generator
    y = [linspace(1,20,100)',linspace(1,20,100)',linspace(1,20,100)'] + randn(100,3);
    total_removed = linspace(1,20,100)';
    deaths = D_0*(1-exp(-k*total_removed)) + rand(100,1);
    expected_model_recovered = y(:,3) - deaths;
    
    [model_D_vs_R, model_D, model_recovered] = model_R(y, total_removed, deaths);
    
    assert(all(abs(model_D - deaths) < 1), "Error: model_D does not match expected value");
    assert(all(abs(model_recovered - expected_model_recovered)< 1), "model_recovered does not match expected value");

end
