function [t,y,A_0,B_0] = sir_param_determination(A,B,tspan,y0,options,active_infections,threshold)

% This function provides the parameters "A_0" and "B_0" describing the ODE
% system of the SIR model and build the solution for that system, [t,y].

% INPUT PARAMETERS:
% - A: 1xn (n generic) row vector generated by the user containing the
% possible value of the exponential increasing parameter
% - B: 1xn (n generic) row vector generated by the user containing the
% possible value of the exponential decreasing parameter
% - tspan: 1x2 vector with initial and final time
% - y0: 1x3 vector containing ODE initial condition of the Cauchy problem
% - options: non mandatory, structure that sets the upper bound for the step size integration
% - active_infections: nx1 column vector containing raw data imported by the dataframe
% - threshold: float positive number (if set too small, convergence may not be
%   reached)

% OUTPUT PARAMETERS:
% - t: nx1 column vector (n generic) generated by solving the ODE SIR model, being the
%   time vector of the former
% - y: nx3 matrix (n generic) being the ODE system solution of the SIR model 
%   (y(:,1) = S(t), y(:,2) = I(t), y(:,3) = R(t))
% - A_0 = float positive number, exponential increasing parameter
% - B_0 = float positive number, exponential decreasing parameter

% The function initializes the flag "delta" to false.
% The duoble iterative cycle spans over the 2 vectors A and B in which the
% user assumes to finde the true value of the SIR parameters.

% Within the cylces, the sir model is built by means of the function "sir",
% then the system of ODE is solved with the function "ode45". 

% The difference between the raw data (active infections) and the model (y) is accounted by the
% function "distance_model_raw". If this difference is smaller than the provided
% threshold (so if delta == true), the associated parameters "A" and "B" are identified and the
% cylces are stopped.

    delta = false;
    for i = 1:length(A)
        for j = 1:length(B)
            sir_func = @(t,y) sir(t,y,A(i),B(j));
            [t,y] = ode45(sir_func,tspan,y0,options);
            [delta, error] = distance_model_raw(active_infections,y,threshold);
            if delta == true
                disp("A = " + A(i) + ", B = " + B(j) + ", y_{model} - y_{active inf} = " + error);
                delta = true;
                A_0 = A(i);
                B_0 = B(j);
                break
            end 
        end
        if delta == true
            break
        end
    end
end
